/*
 * msa-bootcamp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Song;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlbumAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-04T17:32:23.732376+09:00[Asia/Seoul]")
public class AlbumAllOf {
  public static final String SERIALIZED_NAME_SONGS = "songs";
  @SerializedName(SERIALIZED_NAME_SONGS)
  private List<Song> songs = null;

  public static final String SERIALIZED_NAME_ALBUM_ID = "albumId";
  @SerializedName(SERIALIZED_NAME_ALBUM_ID)
  private Long albumId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public AlbumAllOf() { 
  }

  public AlbumAllOf songs(List<Song> songs) {
    
    this.songs = songs;
    return this;
  }

  public AlbumAllOf addSongsItem(Song songsItem) {
    if (this.songs == null) {
      this.songs = new ArrayList<>();
    }
    this.songs.add(songsItem);
    return this;
  }

   /**
   * Get songs
   * @return songs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Song> getSongs() {
    return songs;
  }


  public void setSongs(List<Song> songs) {
    this.songs = songs;
  }


  public AlbumAllOf albumId(Long albumId) {
    
    this.albumId = albumId;
    return this;
  }

   /**
   * Get albumId
   * @return albumId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Long getAlbumId() {
    return albumId;
  }


  public void setAlbumId(Long albumId) {
    this.albumId = albumId;
  }


  public AlbumAllOf title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public AlbumAllOf publishedAt(OffsetDateTime publishedAt) {
    
    this.publishedAt = publishedAt;
    return this;
  }

   /**
   * Get publishedAt
   * @return publishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }


  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumAllOf albumAllOf = (AlbumAllOf) o;
    return Objects.equals(this.songs, albumAllOf.songs) &&
        Objects.equals(this.albumId, albumAllOf.albumId) &&
        Objects.equals(this.title, albumAllOf.title) &&
        Objects.equals(this.publishedAt, albumAllOf.publishedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(songs, albumId, title, publishedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumAllOf {\n");
    sb.append("    songs: ").append(toIndentedString(songs)).append("\n");
    sb.append("    albumId: ").append(toIndentedString(albumId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("songs");
    openapiFields.add("albumId");
    openapiFields.add("title");
    openapiFields.add("publishedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlbumAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AlbumAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumAllOf is not found in the empty JSON string", AlbumAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AlbumAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlbumAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraysongs = jsonObj.getAsJsonArray("songs");
      if (jsonArraysongs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("songs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `songs` to be an array in the JSON string but got `%s`", jsonObj.get("songs").toString()));
        }

        // validate the optional field `songs` (array)
        for (int i = 0; i < jsonArraysongs.size(); i++) {
          Song.validateJsonObject(jsonArraysongs.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumAllOf>() {
           @Override
           public void write(JsonWriter out, AlbumAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlbumAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlbumAllOf
  * @throws IOException if the JSON string is invalid with respect to AlbumAllOf
  */
  public static AlbumAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumAllOf.class);
  }

 /**
  * Convert an instance of AlbumAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

