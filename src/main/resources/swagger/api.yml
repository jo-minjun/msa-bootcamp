openapi: '3.0.1'

info:
  title: 'msa-bootcamp'
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

# TODO
# API Endpoint
#  - Singer: createSinger
#  - Album: createAlbum
#  - Song: createSong, listSongs, getSong, updateSong, deleteSong
# API Model
#  - Singer, Album, Song
#  - SongList
#  @see https://wiki.mm.meshkorea.net/display/MES/API+Collection+Response
#  @see https://wiki.mm.meshkorea.net/pages/viewpage.action?pageId=67437509

paths:
  /api/singers:
    post:
      description: create an singer
      operationId: createSinger
      tags:
        - Singer
      requestBody:
        description: singer model
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Singer'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/singers/{singerId}/albums:
    parameters:
      - $ref: '#/components/parameters/SingerIdParam'

    post:
      description: create an album
      operationId: createAlbum
      tags:
        - Albumn
      requestBody:
        description: album model
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/singers/{singerId}/albums/{albumId}/songs:
    parameters:
      - $ref: '#/components/parameters/SingerIdParam'
      - $ref: '#/components/parameters/AlbumIdParam'

    get:
      description: get song list
      operationId: getSongs
      tags:
        - Song
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
          content:
            application/vnd.vroong.private.v1+json:
              schema:
                $ref: '#/components/schemas/SongList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'


  /api/singers/{singerId}/albums/{albumId}/songs/{songId}:
    parameters:
      - $ref: '#/components/parameters/SingerIdParam'
      - $ref: '#/components/parameters/AlbumIdParam'
      - $ref: '#/components/parameters/SongIdParam'

    post:
      description: create song
      operationId: createSong
      tags:
        - Song
      requestBody:
        description: song model
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      description: get song
      operationId: getSong
      tags:
        - Song
      responses:
        '200':
          $ref: '#/components/responses/Ok'
          content:
            application/vnd.vroong.private.v1+json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      description: update song
      operationId: updateSong
      tags:
        - Song
      requestBody:
        description: song model
        content:
          application/vnd.vroong.private.v1+json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      description: delete song
      operationId: deleteSong
      tags:
        - Song
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    #----------------------------------------
    # API fields
    #----------------------------------------

    LongId:
      type: integer
      format: int64
      example: 1

    String:
      type: string
      example: "foo"

    UUID:
      type: string
      format: uuid
      example: c9106593-2d6c-40eb-8504-66b0ef41ad2d

    DateTime:
      type: string
      format: date-time
      example: 1994-06-13T:11:15:30+09:00

    Duration:
      type: string
      format: duration
      example: PT1D

    #----------------------------------------
    # Common Model
    #----------------------------------------
    CommonProperties:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'
        createdBy:
          $ref: '#/components/schemas/UUID'
        updatedBy:
          $ref: '#/components/schemas/UUID'

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: msabootcamp/constraint-violation
        title:
          type: string
          example: 제출한 요청이 유효하지 않습니다
        detail:
          type: string
        fieldErrors:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      type: object
      properties:
        field:
          type: string
        message:
          $ref: '#/components/schemas/ErrorCode'

    ErrorCode:
      type: string
      example:
        - NotNull
        - Size

    Page:
      type: object
      properties:
        size:
          type: integer
          format: int32
          default: 20
          example: 20
        totalElements:
          type: integer
          format: int64
          example: 100
        totalPages:
          type: integer
          format: int32
          example: 5
        number:
          type: integer
          format: int32
          default: 1
          example: 1

    #----------------------------------------
    # API Model
    #----------------------------------------
    Singer:
      allOf:
        - $ref: '#/components/schemas/CommonProperties'
        - type: object
          required:
            - name
          properties:
            singerId:
              $ref: '#/components/schemas/LongId'
            name:
              $ref: '#/components/schemas/String'

    Album:
      allOf:
        - $ref: '#/components/schemas/CommonProperties'
        - $ref: '#/components/schemas/Singer'
        - type: object
          required:
            - title
          properties:
            albumId:
              $ref: '#/components/schemas/LongId'
            title:
              $ref: '#/components/schemas/String'
            publishedAt:
              $ref: '#/components/schemas/DateTime'
    
    Song:
      allOf:
        - $ref: '#/components/schemas/CommonProperties'
        - $ref: '#/components/schemas/Album'
        - type: object
          required:
            - title
          properties:
            songId:
              $ref: '#/components/schemas/LongId'
            title:
              $ref: '#/components/schemas/String'
            playTime:
              $ref: '#/components/schemas/DateTime'

    SongList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        page:
          $ref: '#/components/schemas/Page'

  parameters:
    SingerIdParam:
      in: path
      description: singer id
      name: singerId
      required: true
      schema:
        $ref: '#/components/schemas/LongId'

    AlbumIdParam:
      in: path
      description: album id
      name: albumId
      required: true
      schema:
        $ref: '#/components/schemas/LongId'

    SongIdParam:
      in: path
      description: song id
      name: songId
      required: true
      schema:
        $ref: '#/components/schemas/LongId'

    PageParam:
      in: query
      name: page
      schema:
        type: integer
        format: int32
        default: 1

    SizeParam:
      in: query
      name: size
      schema:
        type: integer
        format: int32
        default: 10

  responses:
    Ok:
      description: Ok

    Created:
      description: Created

    Accepted:
      description: Accepted

    NoContent:
      description: No Content

    EmptyContent:
      description: No Content
      content:
        application/vnd.vroong.private.v1+json: { }

    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

    ServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  securitySchemes:
    'jhipster-uaa':
      type: oauth2
      flows:
        password:
          tokenUrl: http://localhost:9999/uaa/oauth/token
          refreshUrl: http://localhost:9999/uaa/oauth/token
          scopes: {}
        clientCredentials:
          tokenUrl: http://localhost:9999/uaa/oauth/token
          scopes: {}

security:
  - jhipster-uaa: []
